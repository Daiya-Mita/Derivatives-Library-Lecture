/* UTParkMiller.cpp
*
* Copyright (c) 2016
* Diva Analytics
*/

#include "UTRandomParkMiller.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

const long UTParkMiller::a = 16807;
const long UTParkMiller::m = 2147483647;
const long UTParkMiller::q = 127773;
const long UTParkMiller::r = 2836;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
UTParkMiller::UTParkMiller(long seed) : mySeed(seed)
{
	if (mySeed == 0)
		mySeed = 1;
}

///////////////////////////////////////////////////////////////////////////////
void UTParkMiller::setSeed(long seed)
{
	mySeed = seed;
	if (mySeed == 0)
		mySeed = 1;
}

///////////////////////////////////////////////////////////////////////////////
unsigned long UTParkMiller::max()
{
	return m - 1;
}

///////////////////////////////////////////////////////////////////////////////
unsigned long UTParkMiller::min()
{
	return 1;
}

///////////////////////////////////////////////////////////////////////////////
long UTParkMiller::getOneRandomInteger()
{
	long k;

	k = mySeed / q;

	mySeed = a*(mySeed - k*q) - r*k;

	if (mySeed < 0)
		mySeed += m;

	return mySeed;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
UTRandomParkMiller::UTRandomParkMiller()
	: UTRandomBase(),
	myInitialSeed(1UL)
{
	myReciprocal = 1.0 / (1.0 + myGenerator.max());
}

///////////////////////////////////////////////////////////////////////////////
UTRandomParkMiller::UTRandomParkMiller(unsigned long dimensionality, unsigned long seed)
	: UTRandomBase(dimensionality),
	myGenerator(seed),
	myInitialSeed(seed)
{
	myReciprocal = 1.0 / (1.0 + myGenerator.max());
}

///////////////////////////////////////////////////////////////////////////////
UTRandomBase* UTRandomParkMiller::clone() const
{
	return new UTRandomParkMiller(*this);
}

///////////////////////////////////////////////////////////////////////////////
void UTRandomParkMiller::nextUniformVector(std::vector<double>& variates)
{
	for (unsigned long j = 0; j < dimensionality(); j++)
		variates[j] = myGenerator.getOneRandomInteger() * myReciprocal;

}

///////////////////////////////////////////////////////////////////////////////
void UTRandomParkMiller::skip(unsigned long numberOfPaths)
{
	vector<double> tmp(dimensionality());
	for (unsigned long j = 0; j < numberOfPaths; j++)
		nextUniformVector(tmp);
}

///////////////////////////////////////////////////////////////////////////////
void UTRandomParkMiller::setSeed(unsigned long seed)
{
	myInitialSeed = seed;
	myGenerator.setSeed(seed);
}

///////////////////////////////////////////////////////////////////////////////
void UTRandomParkMiller::reset()
{
	myGenerator.setSeed(myInitialSeed);
}

///////////////////////////////////////////////////////////////////////////////
void UTRandomParkMiller::resetDimensionality(unsigned long dimensionality)
{
	UTRandomBase::resetDimensionality(dimensionality);
	myGenerator.setSeed(myInitialSeed);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
